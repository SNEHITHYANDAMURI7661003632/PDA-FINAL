# -*- coding: utf-8 -*-
"""LVADSUSR107_PDA _FINAL_CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DmA6ztzAB5O2xsf-E7DL6bbM19a40qel
"""

import pandas as pd
import numpy as np
df=pd.read_csv('/content/loan_approval.csv')
df.head()

df.isnull().sum()
df.fillna(df.mean(),inplace=True)
df.corr()
import seaborn as sns
sns.heatmap(df.corr(),annot=True)
df.duplicated().sum()
df.drop_duplicates()

sns.boxplot(df)

Q1 = df[' residential_assets_value'].quantile(0.25)
Q3 = df[' residential_assets_value'].quantile(0.75)
IQR = Q3 - Q1


lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df_no_outliers = df[(df[' residential_assets_value'] >= lower_bound) & (df[' residential_assets_value'] <= upper_bound)]

print("Original DataFrame:")
print(df)
print("\nDataFrame after removing outliers:")
print(df_no_outliers)

import matplotlib.pyplot as plt
import seaborn as sns

plt.hist(df)

plt.title('Histogram')
plt.show()

from sklearn.preprocessing import LabelEncoder


le = LabelEncoder()
df[' education'] = le.fit_transform(df[' education'])
df[' self_employed'] = le.fit_transform(df[' self_employed'])
df[' loan_status'] = le.fit_transform(df[' loan_status'])

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
x=df[[' education',' no_of_dependents',' self_employed',' cibil_score',' income_annum',' loan_amount',' residential_assets_value',' commercial_assets_value',	' luxury_assets_value',' bank_asset_value']]
y=df[' loan_status']
from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.4,random_state=42)
model.fit(train_x,train_y)
pred=model.predict(test_x)
print(pred)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix,classification_report

accuracy = accuracy_score(test_y, pred)
precision = precision_score(test_y, pred)
recall = recall_score(test_y, pred)

f1 = f1_score(test_y, pred)

conf_matrix = confusion_matrix(test_y, pred)
classif_report=classification_report(test_y,pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Confusion Matrix:")
print(conf_matrix)
print(classif_report)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.show()